import rv32i_types::*;

module cpu_datapath
(
    input clk,
    
    /* Control inputs */
    input logic load_pc,
    input logic load_ir,
    input logic load_regfile,
    input logic load_mar,
    input logic load_mdr,
    input logic load_data_out,
    input logic pcmux_sel,
    input branch_funct3_t cmpop,
    input logic alumux1_sel,
    input logic [2:0] alumux2_sel,
    input logic [2:0] regfilemux_sel,
    input logic marmux_sel,
    input logic cmpmux_sel,
    input alu_ops aluop,
	 input logic load_unsigned,
	 input logic [31:0] alu_out_mask,
   
    /* Control outputs */
	output rv32i_opcode opcode,
	output logic [2:0] funct3,
	output logic [6:0] funct7,
	output logic br_en,
    output logic bit30,

    /* Memory inputs */
    input rv32i_word mem_rdata,
    
    /* Memory outputs */
    output rv32i_word mem_address,
    output rv32i_word mem_wdata
);

/* declare internal signals */
logic cmp_out;

rv32i_word pc_out;
rv32i_word alu_out;
rv32i_word pc_plus4_out;
rv32i_word mdr_out;

rv32i_word rs1_out, rs2_out, cmpmux_out;

rv32i_word i_imm, s_imm, b_imm, u_imm, j_imm;

/*
 * PC
 */
rv32i_word pcmux_out;

assign pc_plus4_out = pc_out + 4;

mux2 pcmux
(
    .sel(pcmux_sel),
    .a(pc_plus4_out),
    .b(alu_out),
    .f(pcmux_out)
);

pc_register pc
(
    .clk,
    .load(load_pc),
    .in(pcmux_out),
    .out(pc_out)
);

/*
 * MAR
 */
rv32i_word marmux_out;
mux2 marmux
(
	.sel(marmux_sel),
	.a(pc_out),
	.b(alu_out),
	.f(marmux_out)
);

register mar
(
	.clk,
	.load(load_mar),
	.in(marmux_out),
	.out(mem_address)
);

/*
 * MDR
 */
register mdr
(
	.clk,
	.load(load_mdr),
	.in(mem_rdata),
	.out(mdr_out)
);

assign bit30 = mdr_out[30];

/*
 * Register File
 */
rv32i_word regfilemux_out;
rv32i_reg rs1, rs2, rd;

logic base_half_out, base_byte_out;

mux2 #(.width(1)) base_half_mux 
(
	.sel(load_unsigned),
	.a(mdr_out[15]), // sext
	.b(1'b0), // zext
	.f(base_half_out)
);

mux2 #(.width(1)) base_byte_mux 
(
	.sel(load_unsigned),
	.a(mdr_out[7]), // sext
	.b(1'b0), // zext
	.f(base_byte_out)
);

mux8 regfile_mux
(
	.sel(regfilemux_sel),
	.a(alu_out),
	.b({31'd0, cmp_out}),
	.c(u_imm),
	.d(mdr_out),
	.e({{16{base_half_out}}, mdr_out[15:0]}), // lh or lhu
	.f({{24{base_byte_out}}, mdr_out[7:0]}), // lb or lbu
	.g(pc_plus4_out), // PC + 4
	.h(32'd0), // unused
	.i(regfilemux_out)
);

ir IR
(
    .clk,
	.load(load_ir),
    .in(mdr_out),
    .funct3,
    .funct7,
    .opcode,
    .i_imm,
    .s_imm,
    .b_imm,
    .u_imm,
    .j_imm,
    .rs1,
    .rs2,
    .rd
);

regfile regfile
(
    .clk,
    .load(load_regfile),
    .in(regfilemux_out),
    .src_a(rs1),
    .src_b(rs2),
    .dest(rd),
    .reg_a(rs1_out),
    .reg_b(rs2_out)
);

/*
 * ALU
 */
logic [31:0] alu_premask_out;
rv32i_word alumux1_out, alumux2_out;

mux2 alumux1
(
	.sel(alumux1_sel),
	.a(rs1_out),
	.b(pc_out),
	.f(alumux1_out)
);

mux6 alumux2
(
	.sel(alumux2_sel),
	.a(i_imm),
	.b(u_imm),
	.c(b_imm),
	.d(s_imm),
	.e(j_imm),
	.f(rs2_out),
	.g(alumux2_out)
);

alu alu0
(
	.aluop,
	.a(alumux1_out),
	.b(alumux2_out),
   .f(alu_premask_out)
);

assign alu_out = alu_premask_out & alu_out_mask; // masking set for JALR

/*
 * data_out
 */
register datareg
(
	.clk,
	.load(load_data_out),
	.in(rs2_out),
	.out(mem_wdata)
);

/*
 * CMP
 */

assign br_en = cmp_out;

mux2 cmpmux
(
	.sel(cmpmux_sel),
	.a(rs2_out),
	.b(i_imm),
	.f(cmpmux_out)
);

cmp cmp1
(
	.cmpop,
	.a(rs1_out),
	.b(cmpmux_out),
	.enable(cmp_out)
);

endmodule : cpu_datapath
