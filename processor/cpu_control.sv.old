import rv32i_types::*; /* Import types defined in rv32i_types.sv */

module cpu_control
(
    input clk,
    
    /* Datapath inputs */
    input rv32i_opcode opcode,
    input logic [2:0] funct3,
    input logic [6:0] funct7,
    input logic br_en,
	 input logic bit30,
    
    /* Datapath outputs */
    output logic load_pc,
    output logic load_ir,
    output logic load_regfile,
    output logic load_mar,
    output logic load_mdr,
    output logic load_data_out,
    output logic pcmux_sel,
    output branch_funct3_t cmpop,
    output logic alumux1_sel,
    output logic [2:0] alumux2_sel,
    output logic [2:0] regfilemux_sel,
    output logic marmux_sel,
    output logic cmpmux_sel,
    output alu_ops aluop,
	 output logic load_unsigned,
	 output logic [31:0] alu_out_mask,
    
    /* Memory inputs */
    input mem_resp,
   
    /* Memory outputs */ 
    output logic mem_read,
    output logic mem_write,
    output rv32i_mem_wmask mem_byte_enable
);

enum int unsigned {
	fetch1,
	fetch2,
	fetch3,
	decode,
	s_imm,
	s_reg,
	s_lui,
	calc_addr,
	s_auipc,
	br,
	ldr1,
	ldr2,
	str1,
	str2,
	s_jal1,
	s_jal2,
	s_jalr1,
	s_jalr2
} state, next_state;

always_comb
begin : state_actions
    /* Default output assignments */
    load_pc = 1'b0;
    load_ir = 1'b0;
    load_regfile = 1'b0;
    load_mar = 1'b0;
    load_mdr = 1'b0;
    load_data_out = 1'b0;
    pcmux_sel = 1'b0;
    cmpop = branch_funct3_t'(funct3);
    alumux1_sel = 1'b0;
    alumux2_sel = 2'b00;
    regfilemux_sel = 2'b00;
    marmux_sel = 1'b0;
    cmpmux_sel = 1'b0;
    aluop = alu_ops'(funct3);
    mem_read = 1'b0;
    mem_write = 1'b0;
    mem_byte_enable = 4'b1111;
	 load_unsigned = 1'b0;
	 alu_out_mask = 32'hFFFFFFFF;

    /* Actions for each state */
	case(state)
		fetch1: begin
			/* MAR <= PC */
			load_mar = 1;
		end
		
		fetch2: begin
			/* Read memory */
			mem_read = 1;
			load_mdr = 1;
		end

		fetch3: begin
			/* Load IR */
			load_ir = 1;
		end
		
		decode: /* do nothing */;
		
		s_imm: begin
			load_regfile = 1;
			load_pc = 1;
			case(funct3)
				/* SLTI instruction */
				slt: begin			
					cmpop = blt;
					regfilemux_sel = 1;
					cmpmux_sel = 1;
				end

				/* SLTIU instruction */
				sltu: begin
					cmpop = bltu;
					regfilemux_sel = 1;
					cmpmux_sel = 1;
				end

				/* SR instruction */
				sr: aluop = bit30 ? alu_sra : alu_srl;
				
				/* ADD/SUB instruction */
				add: aluop = alu_add;

				/* other immediate instructions */
				default: aluop = alu_ops'(funct3);
			endcase
		end
		
		s_reg: begin
			/*
			load_regfile = 1;
			alumux2_sel = 5;
			aluop = alu_ops'(funct3);
			*/
			load_pc = 1;
			alumux2_sel = 5;
			load_regfile = 1;
			case(funct3)
				/* SLT instruction */
				slt: begin
					cmpop = blt;
					regfilemux_sel = 1;
					cmpmux_sel = 0;
				end

				/* SLTU instruction */
				sltu: begin
					cmpop = bltu;
					regfilemux_sel = 1;
					cmpmux_sel = 0;
				end

				/* SR instruction */
				sr: aluop = bit30 ? alu_sra : alu_srl;
				
				/* ADD/SUB instruction */
				add: aluop = bit30 ? alu_sub : alu_add;

				/* other immediate instructions */
				default: aluop = alu_ops'(funct3);
			endcase
		end

		calc_addr: begin
			case(opcode)
				op_load: begin
					/* LW instruction */
					aluop = alu_add;
					load_mar = 1;
					marmux_sel = 1;
				end
				
				op_store: begin
					/* SW instruction */
					alumux2_sel = 3;
					aluop = alu_add;
					load_mar = 1;
					load_data_out = 1;
					marmux_sel = 1;
				end
			endcase
		end
		
		br: begin
			pcmux_sel = br_en;
			load_pc = 1;
			alumux1_sel = 1;
			alumux2_sel = 2;
			aluop = alu_add;
		end

		ldr1: begin
			load_mdr = 1;
			mem_read = 1;
		end
		
		ldr2: begin
			regfilemux_sel = 3;
			load_regfile = 1;
			load_pc = 1;
			
			case(load_funct3_t'(funct3))
				lw: regfilemux_sel = 3;
				lb: begin
					regfilemux_sel = 5;
					load_unsigned = 0;
				end
				lh: begin
					regfilemux_sel = 4;
					load_unsigned = 0;
				end
				lbu: begin
					regfilemux_sel = 5;
					load_unsigned = 1;
				end
				lhu: begin
					regfilemux_sel = 4;
					load_unsigned = 1;
				end
			endcase
		end

		str1: begin
			mem_write = 1;

			case(store_funct3_t'(funct3))
				sb: mem_byte_enable = 4'b0001;
				sh: mem_byte_enable = 4'b0011;
				sw: mem_byte_enable = 4'b1111;
			endcase
		end
		
		str2: begin
			load_pc = 1;
		end
		
		s_auipc: begin
			/* DR <= PC + u_imm */
			load_regfile = 1;
			
			//PC is the first input to the ALU
			alumux1_sel = 1;
			
			//the u-type immediate is the second input to the ALU
			alumux2_sel = 1;
			
			//in the case of auipc, funct3 is some random bits so we
			//must explicitly set the aluop
			aluop = alu_add;
			
			/* PC <= P + 4 */
			load_pc = 1;
		end
		
		s_lui: begin
			load_regfile = 1;
			load_pc = 1;
			regfilemux_sel = 2;
		end
		
		s_jal1: begin
			// rd = pc + 4
			regfilemux_sel = 6;
			load_regfile = 1;
		end

		s_jal2: begin
			// pc = pc + offset20
			pcmux_sel = 1;
			load_pc = 1;
			alumux1_sel = 1;
			aluop = alu_add;
			alumux2_sel = 4;
		end
		
		s_jalr1: begin
			// rd = pc + 4
			regfilemux_sel = 6;
			load_regfile = 1;
		end
		
		s_jalr2: begin
			// (rs1 + imm) & 32'hFFFFFFFE
			pcmux_sel = 1;
			load_pc = 1;
			aluop = alu_add;
			alu_out_mask = 32'hFFFFFFFE;
		end

		default: /* Do nothing */;
	endcase
end

always_comb
begin : next_state_logic
    /* Next state information and conditions (if any)
     * for transitioning between states */
    next_state = state;
    case(state)
    	fetch1: next_state = fetch2;
    	fetch2: if (mem_resp) next_state = fetch3;
    	fetch3: next_state = decode;
    	
    	decode: begin
    		case(opcode)
    			op_lui: next_state = s_lui;
    			op_auipc: next_state = s_auipc;
    			op_jal: next_state = s_jal1;
    			op_jalr: next_state = s_jalr1;
    			op_br: next_state = br;
    			op_load: next_state = calc_addr;
    			op_store: next_state = calc_addr;
    			op_imm: next_state = s_imm;
    			op_reg: next_state = s_reg;
    			// op_csr
    			default: begin
					$display("Unknown opcode1");
					$display(opcode);
				end
			endcase
		end
		
		calc_addr: begin
			case(opcode)
				op_load: next_state = ldr1;
				op_store: next_state = str1;
				default: begin
					$display("unknown opcode2");
					$display(opcode);
				end
			endcase
		end
		
		ldr1: if (mem_resp) next_state = ldr2;
		str1: if (mem_resp) next_state = str2;
		
		s_jal1: next_state = s_jal2;
		s_jalr1: next_state = s_jalr2;
		
		default: next_state = fetch1;
	endcase
end

always_ff @(posedge clk)
begin: next_state_assignment
    state <= next_state;
end

endmodule : cpu_control
